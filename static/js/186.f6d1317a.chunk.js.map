{"version":3,"file":"static/js/186.f6d1317a.chunk.js","mappings":"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","sources":["../node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { w as win } from './index5.js';\n\nvar KeyboardResize;\n(function (KeyboardResize) {\n  KeyboardResize[\"Body\"] = \"body\";\n  KeyboardResize[\"Ionic\"] = \"ionic\";\n  KeyboardResize[\"Native\"] = \"native\";\n  KeyboardResize[\"None\"] = \"none\";\n})(KeyboardResize || (KeyboardResize = {}));\nconst Keyboard = {\n  getEngine() {\n    var _a;\n    return ((_a = win === null || win === void 0 ? void 0 : win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Keyboard')) && (win === null || win === void 0 ? void 0 : win.Capacitor.Plugins.Keyboard);\n  },\n  getResizeMode() {\n    const engine = this.getEngine();\n    if (!engine || !engine.getResizeMode) {\n      return Promise.resolve(undefined);\n    }\n    return engine.getResizeMode();\n  },\n};\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  }\n  else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  const focusIn = async () => {\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    /**\n     * Even though the input does not need\n     * scroll assist, we should preserve the\n     * the scroll padding as users could be moving\n     * focus from an input that needs scroll padding\n     * to an input that does not need scroll padding.\n     * If we remove the scroll padding now, users will\n     * see the page jump.\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      currentPadding += scrollData.scrollPadding;\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  inputEl.focus();\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /**\n   * If enabled, we can add scroll padding to\n   * the bottom of the content so that scroll assist\n   * has enough room to scroll the input above\n   * the keyboard.\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding += scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n      /**\n       * When the input is about to be blurred\n       * we should set a timeout to remove\n       * any scroll padding.\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\n   * Grab the native keyboard resize configuration\n   * and pass it to scroll assist. Scroll assist requires\n   * that we adjust the input right before the input\n   * is about to be focused. If we called `Keyboard.getResizeMode`\n   * on focusin in scroll assist, we could potentially adjust the\n   * input too late since this call is async.\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"names":["KeyboardResize","Keyboard","getEngine","_a","win","isPluginAvailable","getResizeMode","engine","this","Promise","resolve","undefined","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","arguments","length","disabledClonedInput","has","addClone","removeClone","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","calcScrollData","inputRect","contentRect","keyboardHeight","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","contentEl","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setTimeout","setClearScrollPaddingListener","doneCallback","addEventListener","clearScrollPadding","once","currentPadding","jsSetFocus","async","footerEl","enableScrollPadding","disableClonedInput","scrollData","getScrollData","itemEl","closest","getBoundingClientRect","defaultView","innerHeight","focus","raf","click","window","scrollContentTimeout","scrollContent","removeEventListener","doubleKeyboardEventListener","scrollByPoint","scrollEl","getScrollElement","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","startInputShims","config","platform","doc","document","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","keyboardResizeMode","registerInput","componentOnReady","inputRoot","shadowRoot","querySelector","findClosestIonContent","rmFn","enableHideCaretOnScroll","scrollHideCaret","shouldHideCaret","input","getRootNode","activeElement","onBlur","showCaret","keyboardResize","addScrollPadding","mode","None","focusIn","enableScrollAssist","enableInputBlurring","focused","didScroll","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","blur","detail","fn","unregisterInput"],"sourceRoot":""}