{"version":3,"file":"static/js/826.fa07f917.chunk.js","mappings":"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","sources":["../node_modules/@ionic/pwa-elements/dist/esm-es5/shadow-css-d7d058ec-d59cb009.js"],"sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function (selector) {\n    var placeholders = [];\n    var index = 0;\n    var content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    var ss = {\n        content: content,\n        placeholders: placeholders,\n    };\n    return ss;\n};\nvar restoreSafeSelector = function (placeholders, content) {\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) { return placeholders[+index]; });\n};\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nvar _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function (input) {\n    return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function (input) {\n    return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function (input, ruleCallback) {\n    var inputWithEscapedBlocks = escapeBlocks(input);\n    var nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var selector = m[2];\n        var content = '';\n        var suffix = m[4];\n        var contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var cssRule = {\n            selector: selector,\n            content: content\n        };\n        var rule = ruleCallback(cssRule);\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n};\nvar escapeBlocks = function (input) {\n    var inputParts = input.split(_curlyRe);\n    var resultParts = [];\n    var escapedBlocks = [];\n    var bracketCount = 0;\n    var currentBlockParts = [];\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    var strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks\n    };\n    return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = function (selector) {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nvar convertColonRule = function (cssText, regExp, partReplacer) {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var parts = m[2].split(',');\n            var r = [];\n            for (var i = 0; i < parts.length; i++) {\n                var p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nvar colonHostPartReplacer = function (host, part, suffix) {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nvar convertColonHost = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = function (host, part, suffix) {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nvar convertColonSlotted = function (cssText, slotScopeId) {\n    var slotClass = '.' + slotScopeId + ' > ';\n    var selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var compound = m[2].trim();\n            var suffix = m[3];\n            var slottedSelector = slotClass + compound + suffix;\n            var prefixSelector = '';\n            for (var i = m[4] - 1; i >= 0; i--) {\n                var char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            var orgSelector = prefixSelector + slottedSelector;\n            var addedSelector = \"\" + prefixSelector.trimRight() + slottedSelector.trim();\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                var updatedSelector = addedSelector + \", \" + orgSelector;\n                selectors.push({\n                    orgSelector: orgSelector,\n                    updatedSelector: updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors: selectors,\n        cssText: cssText\n    };\n};\nvar convertColonHostContext = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = function (cssText) {\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n};\nvar makeScopeMatcher = function (scopeSelector) {\n    var lre = /\\[/g;\n    var rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nvar selectorNeedsScoping = function (selector, scopeSelector) {\n    var re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nvar applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        var replaceBy_1 = \".\" + hostSelector;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n            return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                return before + replaceBy_1 + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy_1 + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nvar applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n    var isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\n        var parts = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parts[_i - 1] = arguments[_i];\n        }\n        return parts[0];\n    });\n    var className = '.' + scopeSelector;\n    var _scopeSelectorPart = function (p) {\n        var scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            var t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                var matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    var safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    var scopedSelector = '';\n    var startIndex = 0;\n    var res;\n    var sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    var shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        var separator = res[1];\n        var part_1 = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n        var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n        scopedSelector += scopedPart + \" \" + separator + \" \";\n        startIndex = sep.lastIndex;\n    }\n    var part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = function (selector, scopeSelectorText, hostSelector, slotSelector) {\n    return selector.split(',')\n        .map(function (shallowPart) {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nvar scopeSelectors = function (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n    return processRules(cssText, function (rule) {\n        var selector = rule.selector;\n        var content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        var cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content: content\n        };\n        return cssRule;\n    });\n};\nvar scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    var slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nvar scopeCss = function (cssText, scopeId, commentOriginalSelector) {\n    var hostScopeId = scopeId + '-h';\n    var slotScopeId = scopeId + '-s';\n    var commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    var orgSelectors = [];\n    if (commentOriginalSelector) {\n        var processCommentedSelector_1 = function (rule) {\n            var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n            var comment = \"/*!@\" + rule.selector + \"*/\";\n            orgSelectors.push({ placeholder: placeholder, comment: comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, function (rule) {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector_1(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector_1);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = __spreadArrays([scoped.cssText], commentsWithHash).join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(function (_a) {\n            var placeholder = _a.placeholder, comment = _a.comment;\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(function (slottedSelector) {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\nexport { scopeCss };\n"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","m","_i","selector","content","suffix","contentPrefix","startsWith","blocks","substring","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","parts","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector","re","makeScopeMatcher","test","applyStrictSelectorScope","hostSelector","_","res","className","_scopeSelectorPart","scopedP","lastIndex","replaceBy_1","before","colon","after","applySimpleSelectorScope","t","matches","match","safeContent","placeholders","index","keep","replaceBy","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part_1","slice","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","scopeCss","commentsWithHash","stripComments","orgSelectors","processCommentedSelector_1","placeholder","comment","scoped","forEach","_a"],"sourceRoot":""}